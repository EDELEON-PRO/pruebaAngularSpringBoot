{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { EventData } from '../_shared/event.class';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/storage.service\";\nimport * as i2 from \"../_shared/event-bus.service\";\nclass HttpRequestInterceptor {\n  constructor(storageService, eventBusService) {\n    this.storageService = storageService;\n    this.eventBusService = eventBusService;\n    this.isRefreshing = false;\n  }\n  intercept(req, next) {\n    req = req.clone({\n      withCredentials: true\n    });\n    return next.handle(req).pipe(catchError(error => {\n      // logout when token is expired\n      /*\n              if (\n                error instanceof HttpErrorResponse &&\n                !req.url.includes('auth/signin') &&\n                error.status === 401\n              ) {\n                return this.handle401Error(req, next);\n              }\n      */\n      return throwError(() => error);\n    }));\n  }\n  handle401Error(request, next) {\n    if (!this.isRefreshing) {\n      this.isRefreshing = true;\n      if (this.storageService.isLoggedIn()) {\n        this.eventBusService.emit(new EventData('logout', null));\n      }\n    }\n    return next.handle(request);\n  }\n}\nHttpRequestInterceptor.ɵfac = function HttpRequestInterceptor_Factory(t) {\n  return new (t || HttpRequestInterceptor)(i0.ɵɵinject(i1.StorageService), i0.ɵɵinject(i2.EventBusService));\n};\nHttpRequestInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpRequestInterceptor,\n  factory: HttpRequestInterceptor.ɵfac\n});\nexport { HttpRequestInterceptor };\nexport const httpInterceptorProviders = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: HttpRequestInterceptor,\n  multi: true\n}];","map":{"version":3,"names":["HTTP_INTERCEPTORS","throwError","catchError","EventData","HttpRequestInterceptor","constructor","storageService","eventBusService","isRefreshing","intercept","req","next","clone","withCredentials","handle","pipe","error","handle401Error","request","isLoggedIn","emit","i0","ɵɵinject","i1","StorageService","i2","EventBusService","factory","ɵfac","httpInterceptorProviders","provide","useClass","multi"],"sources":["C:\\Users\\SoporteTI\\Documents\\EDI\\PRUEBA\\angular-16-jwt-auth-master\\src\\app\\_helpers\\http.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HTTP_INTERCEPTORS, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { StorageService } from '../_services/storage.service';\nimport { EventBusService } from '../_shared/event-bus.service';\nimport { EventData } from '../_shared/event.class';\n\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n  private isRefreshing = false;\n\n  constructor(private storageService: StorageService, private eventBusService: EventBusService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    req = req.clone({\n      withCredentials: true,\n    });\n\n    return next.handle(req).pipe(\n      catchError((error) => {\n        // logout when token is expired\n/*\n        if (\n          error instanceof HttpErrorResponse &&\n          !req.url.includes('auth/signin') &&\n          error.status === 401\n        ) {\n          return this.handle401Error(req, next);\n        }\n*/\n        return throwError(() => error);\n      })\n    );\n  }\n\n  private handle401Error(request: HttpRequest<any>, next: HttpHandler) {\n    if (!this.isRefreshing) {\n      this.isRefreshing = true;\n\n      if (this.storageService.isLoggedIn()) {\n        this.eventBusService.emit(new EventData('logout', null));\n      }\n    }\n\n    return next.handle(request);\n  }\n}\n\nexport const httpInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: HttpRequestInterceptor, multi: true },\n];\n"],"mappings":"AACA,SAA+DA,iBAAiB,QAA2B,sBAAsB;AACjI,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAI3C,SAASC,SAAS,QAAQ,wBAAwB;;;;AAElD,MACaC,sBAAsB;EAGjCC,YAAoBC,cAA8B,EAAUC,eAAgC;IAAxE,KAAAD,cAAc,GAAdA,cAAc;IAA0B,KAAAC,eAAe,GAAfA,eAAe;IAFnE,KAAAC,YAAY,GAAG,KAAK;EAEoE;EAEhGC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChDD,GAAG,GAAGA,GAAG,CAACE,KAAK,CAAC;MACdC,eAAe,EAAE;KAClB,CAAC;IAEF,OAAOF,IAAI,CAACG,MAAM,CAACJ,GAAG,CAAC,CAACK,IAAI,CAC1Bb,UAAU,CAAEc,KAAK,IAAI;MACnB;MACR;;;;;;;;;MASQ,OAAOf,UAAU,CAAC,MAAMe,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;EAEQC,cAAcA,CAACC,OAAyB,EAAEP,IAAiB;IACjE,IAAI,CAAC,IAAI,CAACH,YAAY,EAAE;MACtB,IAAI,CAACA,YAAY,GAAG,IAAI;MAExB,IAAI,IAAI,CAACF,cAAc,CAACa,UAAU,EAAE,EAAE;QACpC,IAAI,CAACZ,eAAe,CAACa,IAAI,CAAC,IAAIjB,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;;;IAI5D,OAAOQ,IAAI,CAACG,MAAM,CAACI,OAAO,CAAC;EAC7B;;AArCWd,sBAAsB,C;mBAAtBA,sBAAsB,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,eAAA;AAAA;AAAtBtB,sBAAsB,C;SAAtBA,sBAAsB;EAAAuB,OAAA,EAAtBvB,sBAAsB,CAAAwB;AAAA;SAAtBxB,sBAAsB;AAwCnC,OAAO,MAAMyB,wBAAwB,GAAG,CACtC;EAAEC,OAAO,EAAE9B,iBAAiB;EAAE+B,QAAQ,EAAE3B,sBAAsB;EAAE4B,KAAK,EAAE;AAAI,CAAE,CAC9E"},"metadata":{},"sourceType":"module","externalDependencies":[]}